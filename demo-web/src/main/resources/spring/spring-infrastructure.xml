<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd"
       default-lazy-init="false">
    
    <description>spring-infrastructure-configuration</description>

    <mvc:annotation-driven conversion-service="conversionService">
       <mvc:message-converters register-defaults="true">
            <ref bean="xMessageConverter"/>
        </mvc:message-converters>
        <mvc:argument-resolvers>
            <bean class="com.hup.bind.method.CurrentUserMethodArgumentResolver"/>
        </mvc:argument-resolvers>
    </mvc:annotation-driven>

    <!--<bean class="com.hupception.ExceptionDefinitions" />-->
    <!--<bean class="com.hupntext.ApplicationContextHelper" />-->
    <!-- 扫描注解Bean -->
    <context:component-scan base-package="com.hup.dao">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <context:component-scan base-package="com.hup.service" />
    <context:component-scan base-package="com.hup.controller" />
    <context:component-scan base-package="com.hup.server,com.hup.handler"/>

    <bean id="conversionService"
          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="com.hup.converter.StringToBaseEnumConverterFactory"></bean>
            </set>
        </property>
    </bean>


   <bean id="xMessageConverter" class="com.hup.context.XMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
                <value>text/json;charset=UTF-8</value>
                <value>text/plain;charset=UTF-8</value>
            </list>
        </property>
        <property name="features">
            <list>
                <value>QuoteFieldNames</value>
                <value>WriteNullListAsEmpty</value>
                <value>WriteNullStringAsEmpty</value>
                <value>WriteNullNumberAsZero</value>
                <value>WriteNullBooleanAsFalse</value>
                <value>WriteDateUseDateFormat</value>
            </list>
        </property>
    </bean>

   <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/api/**"/>
            <bean class="com.hup.interceptor.XInterceptor">
                <property name="XInterceptorList">
                    <list>
                        <bean class="com.hup.interceptor.RequestInterceptor"/>
                        <bean class="com.hup.interceptor.SignatureInterceptor"/>
                    </list>
                </property>
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 设置FreeMarker的配置文件路径 -->
    <bean id="freemarkerConfiguration"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="location" value="classpath:props/freemarker.properties" />
    </bean>

    <!-- FreemarkerConfig -->
    <bean id="freemarkerConfig"
          class="com.hup.shiro.ShiroTagFreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/ftl/" />
        <property name="freemarkerSettings" ref="freemarkerConfiguration" />
    </bean>

    <!--<bean id="mailService" name="mailService" class="com.common.service.impl.SpringMailService">
        <property name="host" value="${mail.smtp.host}"/>
        <property name="port" value="${mail.port}"/>
        <property name="username" value="${mail.user}"/>
        <property name="password" value="${mail.pass}"/>
        <property name="auth" value="${mail.auth}"/>
    </bean>-->

    <!-- 发送邮件 start -->
    <!--<bean id="mailSenderService" class="com.hupmmon.service.impl.MailSenderServiceImpl">
        <property name="mailService">
            <ref bean="mailService"/>
        </property>
        <property name="freeMarkerConfig">
            <ref bean="freemarkerConfig"/>
        </property>
    </bean>-->


    <!-- webSocket + protoBuf通信协议配置 -->
    <!--<bean id="webSocketServer" class="com.hup.server.WebSocketServer" init-method="init"
          destroy-method="destroy">
    </bean>-->

    <!-- quartz的定时任务的factorybean,配置其他config -->
    <bean id="jobFactory" class="com.hup.util.JobFactory"></bean>
    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="jobFactory" ref="jobFactory"></property>
    </bean>
    <!-- 巡检计划生成定时任务 -->
    <bean id="jobQuartzInitialize" class="com.hup.service.JobQuartzInitialize" init-method="init"
          destroy-method="destroy">
    </bean>

</beans>